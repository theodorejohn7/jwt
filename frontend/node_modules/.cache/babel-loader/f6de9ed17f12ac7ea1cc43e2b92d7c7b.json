{"ast":null,"code":"import axios from \"axios\";\nimport TokenService from \"./tokenService\";\nimport authService from \"./authService\";\nimport { useNavigate } from \"react-router-dom\";\nconst instance = axios.create({\n  baseURL: \"http://localhost:5000\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\ninstance.interceptors.request.use(config => {\n  const token = TokenService.getLocalAccessToken();\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n}, error => {\n  console.log(\"eror @line 23\");\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(res => {\n  return res;\n}, async error => {\n  const originalConfig = error.config;\n\n  if (error.response) {\n    if (error.response.status === 403 && !originalConfig._retry) {\n      originalConfig._retry = true;\n\n      try {\n        const res = await instance.post(\"/auth/token\", {\n          refreshToken: TokenService.getLocalRefreshToken()\n        });\n        console.log(\"response\", res);\n        const {\n          accessToken\n        } = res.data;\n        console.log(\"updatedNewAccessToken\", accessToken);\n        TokenService.updateNewAccessToken(accessToken);\n        return instance(originalConfig);\n      } catch (error1) {\n        return Promise.reject(error1);\n      }\n    } //refresh token expired\n    // if (error.response.status === 403 && error.response.data) {\n\n\n    if (error.response.status === 403) {\n      console.log(\"inside error of token expired\");\n      return Promise.reject(error.response.data);\n    } /////////////////////\n\n  } // console.log(\"above reject\")\n\n\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","TokenService","authService","useNavigate","instance","create","baseURL","headers","interceptors","request","use","config","token","getLocalAccessToken","error","console","log","Promise","reject","response","res","originalConfig","status","_retry","post","refreshToken","getLocalRefreshToken","accessToken","data","updateNewAccessToken","error1"],"sources":["/home/dell/Desktop/Theo/REACT JS/jwt/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\nimport TokenService from \"./tokenService\";\nimport authService from \"./authService\";\n\nimport { useNavigate } from \"react-router-dom\";\n\nconst instance = axios.create({\n  baseURL: \"http://localhost:5000\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\ninstance.interceptors.request.use(\n  (config) => {\n    const token = TokenService.getLocalAccessToken();\n    if (token) {\n      config.headers[\"x-auth-token\"] = token;\n    }\n    return config;\n  },\n  (error) => {\n    console.log(\"eror @line 23\");\n    return Promise.reject(error);\n  }\n);\n\ninstance.interceptors.response.use(\n  (res) => {\n    return res;\n  },\n  async (error) => {\n    const originalConfig = error.config;\n    if (error.response) {\n      if (error.response.status === 403 && !originalConfig._retry) {\n        originalConfig._retry = true;\n        try {\n          const res = await instance.post(\"/auth/token\", {\n            refreshToken: TokenService.getLocalRefreshToken(),\n          });\n          console.log(\"response\", res);\n          const { accessToken } = res.data;\n          console.log(\"updatedNewAccessToken\", accessToken);\n          TokenService.updateNewAccessToken(accessToken);\n\n          return instance(originalConfig);\n        } catch (error1) {\n          return Promise.reject(error1);\n        }\n      }\n\n      //refresh token expired\n\n      // if (error.response.status === 403 && error.response.data) {\n      if (error.response.status === 403) {\n        console.log(\"inside error of token expired\");\n        return Promise.reject(error.response.data);\n      }\n\n      /////////////////////\n    }\n    // console.log(\"above reject\")\n    return Promise.reject(error);\n  }\n);\nexport default instance;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa;EAC5BC,OAAO,EAAE,uBADmB;EAE5BC,OAAO,EAAE;IACP,gBAAgB;EADT;AAFmB,CAAb,CAAjB;AAOAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACGC,MAAD,IAAY;EACV,MAAMC,KAAK,GAAGX,YAAY,CAACY,mBAAb,EAAd;;EACA,IAAID,KAAJ,EAAW;IACTD,MAAM,CAACJ,OAAP,CAAe,cAAf,IAAiCK,KAAjC;EACD;;EACD,OAAOD,MAAP;AACD,CAPH,EAQGG,KAAD,IAAW;EACTC,OAAO,CAACC,GAAR,CAAY,eAAZ;EACA,OAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CAXH;AAcAV,QAAQ,CAACI,YAAT,CAAsBW,QAAtB,CAA+BT,GAA/B,CACGU,GAAD,IAAS;EACP,OAAOA,GAAP;AACD,CAHH,EAIE,MAAON,KAAP,IAAiB;EACf,MAAMO,cAAc,GAAGP,KAAK,CAACH,MAA7B;;EACA,IAAIG,KAAK,CAACK,QAAV,EAAoB;IAClB,IAAIL,KAAK,CAACK,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACD,cAAc,CAACE,MAArD,EAA6D;MAC3DF,cAAc,CAACE,MAAf,GAAwB,IAAxB;;MACA,IAAI;QACF,MAAMH,GAAG,GAAG,MAAMhB,QAAQ,CAACoB,IAAT,CAAc,aAAd,EAA6B;UAC7CC,YAAY,EAAExB,YAAY,CAACyB,oBAAb;QAD+B,CAA7B,CAAlB;QAGAX,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBI,GAAxB;QACA,MAAM;UAAEO;QAAF,IAAkBP,GAAG,CAACQ,IAA5B;QACAb,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCW,WAArC;QACA1B,YAAY,CAAC4B,oBAAb,CAAkCF,WAAlC;QAEA,OAAOvB,QAAQ,CAACiB,cAAD,CAAf;MACD,CAVD,CAUE,OAAOS,MAAP,EAAe;QACf,OAAOb,OAAO,CAACC,MAAR,CAAeY,MAAf,CAAP;MACD;IACF,CAhBiB,CAkBlB;IAEA;;;IACA,IAAIhB,KAAK,CAACK,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;MACjCP,OAAO,CAACC,GAAR,CAAY,+BAAZ;MACA,OAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAK,CAACK,QAAN,CAAeS,IAA9B,CAAP;IACD,CAxBiB,CA0BlB;;EACD,CA7Bc,CA8Bf;;;EACA,OAAOX,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CApCH;AAsCA,eAAeV,QAAf"},"metadata":{},"sourceType":"module"}